-- Combine Two Tables
select e.emp_id, e.first_name, e.last_name, b.branch_id, b.branch_name 
from employee e 
left join branch b 
on e.branch_id = b.branch_id ;  


-- Second Highest Salary
select max(e.salary)
from employee e 
where e.salary < (select max(e.salary) 
				from employee e2);


-- Third Highest Salary 
select max(e.salary)
from employee e 
where e.salary < (select max(e.salary) 
				from employee e 
				where e.salary < (select max(e.salary) 
								from employee e));


-- Nth Highest Salary 						
select e.salary
from employee e 
order by salary desc
limit n-1, 1; -- replace n with the desired number or make a function to prompt user for value of n


-- Ranking by salary 
select e.salary, 
	(select count(distinct salary) 
	from employee e2 
	where e2.salary>=e.salary) as 'Rank'
from employee e 
order by e.salary desc;


-- Find numbers that appear at least three times consecutively
create table consecutive_nums (
	id int primary key,
	value varchar(3)
);

insert into consecutive_nums values (1, 1);
insert into consecutive_nums values (2, 1);
insert into consecutive_nums values (3, 1);
insert into consecutive_nums values (4, 2);
insert into consecutive_nums values (5, 3);
insert into consecutive_nums values (6, 4);

select c.value as repeating_nums
from consecutive_nums c
join consecutive_nums c2 
on c.id = c2.id+1 and c.value = c2.value
join consecutive_nums c3
on c.id = c3.id+2 and c.value = c3.value;


-- Employees earning more than their managers
select e.first_name as employee
from employee e 
join employee e2 
on e.supervisor_id = e2.emp_id and e.salary > e2.salary;


-- Duplicate emails 
create table emails(
	id int primary key,
	email varchar(40)
);

insert into emails values (1, 'abc@mail.com');
insert into emails values (2, 'def@mail.com');
insert into emails values (3, 'abc@mail.com');
insert into emails values (4, 'abc@mail.com');
insert into emails values (5, 'def@mail.com');
insert into emails values (6, 'ghi@mail.com');

select email as Duplicate_emails
from emails
group by email
having count(email)>1;


-- Highest salary of each department
select b.branch_name as branch, e.first_name as employee, e.salary 
from employee e 
join branch b
on e.branch_id = b.branch_id
where (e.branch_id, e.salary) 
in (select e2.branch_id, max(e2.salary)
	from employee e2
	group by e2.branch_id
);


-- Top three salaries of each department
select b.branch_name as branch, e.first_name as employee, e.salary 
from employee e 
join branch b
on e.branch_id = b.branch_id
where 3> (select count(distinct e2.salary)
		from employee e2
    	where e2.salary > e.salary
    	and e.branch_id = e2.branch_id 
);


-- Delete duplicate emails
delete e2
from emails e
join emails e2
on e.email = e2.email
and e.id < e2.id

select * from emails


-- Identify if three side lengths make a triangle and it's type
create table triangles (
side_a int,
side_b int,
side_c int);

insert into triangles values (20, 20, 23);
insert into triangles values (20, 20, 20);
insert into triangles values (20, 21, 22);
insert into triangles values (13, 14, 30); 

select (case
	when t.side_a + t.side_b < t.side_c then 'Not a triangle'
	when t.side_a = t.side_b and t.side_a = t.side_c then 'Equilateral'
	when t.side_a = t.side_b or t.side_a = t.side_c or t.side_b = t.side_c then 'Isosceles'
	else 'Scalene'
end)
from triangles t;
